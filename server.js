const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

app.use(cors());
app.use(express.static('public'));
app.use(express.json());

// Oyun odalarƒ± ve oyuncular
const rooms = new Map();
const players = new Map();

// √úlke verileri
const countries = [
  { name: 'T√ºrkiye', flag: 'üáπüá∑', code: 'TR' },
  { name: 'Almanya', flag: 'üá©üá™', code: 'DE' },
  { name: 'Fransa', flag: 'üá´üá∑', code: 'FR' },
  { name: 'ƒ∞talya', flag: 'üáÆüáπ', code: 'IT' },
  { name: 'ƒ∞spanya', flag: 'üá™üá∏', code: 'ES' },
  { name: 'ƒ∞ngiltere', flag: 'üá¨üáß', code: 'GB' },
  { name: 'Hollanda', flag: 'üá≥üá±', code: 'NL' },
  { name: 'Bel√ßika', flag: 'üáßüá™', code: 'BE' },
  { name: 'Portekiz', flag: 'üáµüáπ', code: 'PT' },
  { name: 'Yunanistan', flag: 'üá¨üá∑', code: 'GR' },
  { name: 'Polonya', flag: 'üáµüá±', code: 'PL' },
  { name: '√áek Cumhuriyeti', flag: 'üá®üáø', code: 'CZ' },
  { name: 'Macaristan', flag: 'üá≠üá∫', code: 'HU' },
  { name: 'Romanya', flag: 'üá∑üá¥', code: 'RO' },
  { name: 'Bulgaristan', flag: 'üáßüá¨', code: 'BG' },
  { name: 'Hƒ±rvatistan', flag: 'üá≠üá∑', code: 'HR' },
  { name: 'Slovakya', flag: 'üá∏üá∞', code: 'SK' },
  { name: 'Slovenya', flag: 'üá∏üáÆ', code: 'SI' },
  { name: 'Litvanya', flag: 'üá±üáπ', code: 'LT' },
  { name: 'Letonya', flag: 'üá±üáª', code: 'LV' },
  { name: 'Estonya', flag: 'üá™üá™', code: 'EE' },
  { name: 'Finlandiya', flag: 'üá´üáÆ', code: 'FI' },
  { name: 'ƒ∞sve√ß', flag: 'üá∏üá™', code: 'SE' },
  { name: 'Norve√ß', flag: 'üá≥üá¥', code: 'NO' },
  { name: 'Danimarka', flag: 'üá©üá∞', code: 'DK' },
  { name: 'ƒ∞rlanda', flag: 'üáÆüá™', code: 'IE' },
  { name: 'Avusturya', flag: 'üá¶üáπ', code: 'AT' },
  { name: 'ƒ∞svi√ßre', flag: 'üá®üá≠', code: 'CH' },
  { name: 'L√ºksemburg', flag: 'üá±üá∫', code: 'LU' },
  { name: 'Malta', flag: 'üá≤üáπ', code: 'MT' },
  { name: 'Kƒ±brƒ±s', flag: 'üá®üáæ', code: 'CY' },
  { name: 'ABD', flag: 'üá∫üá∏', code: 'US' },
  { name: 'Kanada', flag: 'üá®üá¶', code: 'CA' },
  { name: 'Meksika', flag: 'üá≤üáΩ', code: 'MX' },
  { name: 'Brezilya', flag: 'üáßüá∑', code: 'BR' },
  { name: 'Arjantin', flag: 'üá¶üá∑', code: 'AR' },
  { name: '≈ûili', flag: 'üá®üá±', code: 'CL' },
  { name: 'Peru', flag: 'üáµüá™', code: 'PE' },
  { name: 'Kolombiya', flag: 'üá®üá¥', code: 'CO' },
  { name: 'Venezuela', flag: 'üáªüá™', code: 'VE' },
  { name: 'Uruguay', flag: 'üá∫üáæ', code: 'UY' },
  { name: 'Paraguay', flag: 'üáµüáæ', code: 'PY' },
  { name: 'Bolivya', flag: 'üáßüá¥', code: 'BO' },
  { name: 'Ekvador', flag: 'üá™üá®', code: 'EC' },
  { name: 'Guyana', flag: 'üá¨üáæ', code: 'GY' },
  { name: 'Surinam', flag: 'üá∏üá∑', code: 'SR' },
  { name: 'Fransƒ±z Guyanasƒ±', flag: 'üá¨üá´', code: 'GF' },
  { name: 'Japonya', flag: 'üáØüáµ', code: 'JP' },
  { name: '√áin', flag: 'üá®üá≥', code: 'CN' },
  { name: 'G√ºney Kore', flag: 'üá∞üá∑', code: 'KR' },
  { name: 'Kuzey Kore', flag: 'üá∞üáµ', code: 'KP' },
  { name: 'Vietnam', flag: 'üáªüá≥', code: 'VN' },
  { name: 'Tayland', flag: 'üáπüá≠', code: 'TH' },
  { name: 'Malezya', flag: 'üá≤üáæ', code: 'MY' },
  { name: 'Singapur', flag: 'üá∏üá¨', code: 'SG' },
  { name: 'Endonezya', flag: 'üáÆüá©', code: 'ID' },
  { name: 'Filipinler', flag: 'üáµüá≠', code: 'PH' },
  { name: 'Myanmar', flag: 'üá≤üá≤', code: 'MM' },
  { name: 'Laos', flag: 'üá±üá¶', code: 'LA' },
  { name: 'Kambo√ßya', flag: 'üá∞üá≠', code: 'KH' },
  { name: 'Brunei', flag: 'üáßüá≥', code: 'BN' },
  { name: 'Doƒüu Timor', flag: 'üáπüá±', code: 'TL' },
  { name: 'Hindistan', flag: 'üáÆüá≥', code: 'IN' },
  { name: 'Pakistan', flag: 'üáµüá∞', code: 'PK' },
  { name: 'Banglade≈ü', flag: 'üáßüá©', code: 'BD' },
  { name: 'Sri Lanka', flag: 'üá±üá∞', code: 'LK' },
  { name: 'Nepal', flag: 'üá≥üáµ', code: 'NP' },
  { name: 'Bhutan', flag: 'üáßüáπ', code: 'BT' },
  { name: 'Maldivler', flag: 'üá≤üáª', code: 'MV' },
  { name: 'Afganistan', flag: 'üá¶üá´', code: 'AF' },
  { name: 'ƒ∞ran', flag: 'üáÆüá∑', code: 'IR' },
  { name: 'Irak', flag: 'üáÆüá∂', code: 'IQ' },
  { name: 'Suriye', flag: 'üá∏üáæ', code: 'SY' },
  { name: 'L√ºbnan', flag: 'üá±üáß', code: 'LB' },
  { name: 'ƒ∞srail', flag: 'üáÆüá±', code: 'IL' },
  { name: 'Filistin', flag: 'üáµüá∏', code: 'PS' },
  { name: '√úrd√ºn', flag: 'üáØüá¥', code: 'JO' },
  { name: 'Suudi Arabistan', flag: 'üá∏üá¶', code: 'SA' },
  { name: 'Katar', flag: 'üá∂üá¶', code: 'QA' },
  { name: 'Kuveyt', flag: 'üá∞üáº', code: 'KW' },
  { name: 'Bahreyn', flag: 'üáßüá≠', code: 'BH' },
  { name: 'Umman', flag: 'üá¥üá≤', code: 'OM' },
  { name: 'Yemen', flag: 'üáæüá™', code: 'YE' },
  { name: 'Birle≈üik Arap Emirlikleri', flag: 'üá¶üá™', code: 'AE' },
  { name: 'Mƒ±sƒ±r', flag: 'üá™üá¨', code: 'EG' },
  { name: 'Sudan', flag: 'üá∏üá©', code: 'SD' },
  { name: 'Libya', flag: 'üá±üáæ', code: 'LY' },
  { name: 'Tunus', flag: 'üáπüá≥', code: 'TN' },
  { name: 'Cezayir', flag: 'üá©üáø', code: 'DZ' },
  { name: 'Fas', flag: 'üá≤üá¶', code: 'MA' },
  { name: 'Mauritania', flag: 'üá≤üá∑', code: 'MR' },
  { name: 'Senegal', flag: 'üá∏üá≥', code: 'SN' },
  { name: 'Gambiya', flag: 'üá¨üá≤', code: 'GM' },
  { name: 'Gine-Bissau', flag: 'üá¨üáº', code: 'GW' },
  { name: 'Gine', flag: 'üá¨üá≥', code: 'GN' },
  { name: 'Sierra Leone', flag: 'üá∏üá±', code: 'SL' },
  { name: 'Liberya', flag: 'üá±üá∑', code: 'LR' },
  { name: 'Fildi≈üi Sahili', flag: 'üá®üáÆ', code: 'CI' },
  { name: 'Gana', flag: 'üá¨üá≠', code: 'GH' },
  { name: 'Togo', flag: 'üáπüá¨', code: 'TG' },
  { name: 'Benin', flag: 'üáßüáØ', code: 'BJ' },
  { name: 'Nijerya', flag: 'üá≥üá¨', code: 'NG' },
  { name: 'Nijer', flag: 'üá≥üá™', code: 'NE' },
  { name: 'Burkina Faso', flag: 'üáßüá´', code: 'BF' },
  { name: 'Mali', flag: 'üá≤üá±', code: 'ML' },
  { name: '√áad', flag: 'üáπüá©', code: 'TD' },
  { name: 'Kamerun', flag: 'üá®üá≤', code: 'CM' },
  { name: 'Orta Afrika Cumhuriyeti', flag: 'üá®üá´', code: 'CF' },
  { name: 'Gabon', flag: 'üá¨üá¶', code: 'GA' },
  { name: 'Kongo', flag: 'üá®üá¨', code: 'CG' },
  { name: 'Kongo Demokratik Cumhuriyeti', flag: 'üá®üá©', code: 'CD' },
  { name: 'Angola', flag: 'üá¶üá¥', code: 'AO' },
  { name: 'Zambiya', flag: 'üáøüá≤', code: 'ZM' },
  { name: 'Zimbabve', flag: 'üáøüáº', code: 'ZW' },
  { name: 'Botsvana', flag: 'üáßüáº', code: 'BW' },
  { name: 'Namibya', flag: 'üá≥üá¶', code: 'NA' },
  { name: 'G√ºney Afrika', flag: 'üáøüá¶', code: 'ZA' },
  { name: 'Lesotho', flag: 'üá±üá∏', code: 'LS' },
  { name: 'Esvatini', flag: 'üá∏üáø', code: 'SZ' },
  { name: 'Mozambik', flag: 'üá≤üáø', code: 'MZ' },
  { name: 'Malavi', flag: 'üá≤üáº', code: 'MW' },
  { name: 'Tanzanya', flag: 'üáπüáø', code: 'TZ' },
  { name: 'Kenya', flag: 'üá∞üá™', code: 'KE' },
  { name: 'Uganda', flag: 'üá∫üá¨', code: 'UG' },
  { name: 'Ruanda', flag: 'üá∑üáº', code: 'RW' },
  { name: 'Burundi', flag: 'üáßüáÆ', code: 'BI' },
  { name: 'Etiyopya', flag: 'üá™üáπ', code: 'ET' },
  { name: 'Eritre', flag: 'üá™üá∑', code: 'ER' },
  { name: 'Cibuti', flag: 'üá©üáØ', code: 'DJ' },
  { name: 'Somali', flag: 'üá∏üá¥', code: 'SO' },
  { name: 'Madagaskar', flag: 'üá≤üá¨', code: 'MG' },
  { name: 'Mauritius', flag: 'üá≤üá∫', code: 'MU' },
  { name: 'Sey≈üeller', flag: 'üá∏üá®', code: 'SC' },
  { name: 'Komorlar', flag: 'üá∞üá≤', code: 'KM' },
  { name: 'Avustralya', flag: 'üá¶üá∫', code: 'AU' },
  { name: 'Yeni Zelanda', flag: 'üá≥üáø', code: 'NZ' },
  { name: 'Papua Yeni Gine', flag: 'üáµüá¨', code: 'PG' },
  { name: 'Fiji', flag: 'üá´üáØ', code: 'FJ' },
  { name: 'Vanuatu', flag: 'üáªüá∫', code: 'VU' },
  { name: 'Solomon Adalarƒ±', flag: 'üá∏üáß', code: 'SB' },
  { name: 'Kiribati', flag: 'üá∞üáÆ', code: 'KI' },
  { name: 'Tuvalu', flag: 'üáπüáª', code: 'TV' },
  { name: 'Nauru', flag: 'üá≥üá∑', code: 'NR' },
  { name: 'Palau', flag: 'üáµüáº', code: 'PW' },
  { name: 'Mikronezya', flag: 'üá´üá≤', code: 'FM' },
  { name: 'Marshall Adalarƒ±', flag: 'üá≤üá≠', code: 'MH' },
  { name: 'Rusya', flag: 'üá∑üá∫', code: 'RU' },
  { name: 'Ukrayna', flag: 'üá∫üá¶', code: 'UA' },
  { name: 'Belarus', flag: 'üáßüáæ', code: 'BY' },
  { name: 'Moldova', flag: 'üá≤üá©', code: 'MD' },
  { name: 'G√ºrcistan', flag: 'üá¨üá™', code: 'GE' },
  { name: 'Ermenistan', flag: 'üá¶üá≤', code: 'AM' },
  { name: 'Azerbaycan', flag: 'üá¶üáø', code: 'AZ' },
  { name: 'Kazakistan', flag: 'üá∞üáø', code: 'KZ' },
  { name: '√ñzbekistan', flag: 'üá∫üáø', code: 'UZ' },
  { name: 'T√ºrkmenistan', flag: 'üáπüá≤', code: 'TM' },
  { name: 'Kƒ±rgƒ±zistan', flag: 'üá∞üá¨', code: 'KG' },
  { name: 'Tacikistan', flag: 'üáπüáØ', code: 'TJ' },
  { name: 'Moƒüolistan', flag: 'üá≤üá≥', code: 'MN' },
  { name: 'Kuzey Makedonya', flag: 'üá≤üá∞', code: 'MK' },
  { name: 'Bosna Hersek', flag: 'üáßüá¶', code: 'BA' },
  { name: 'Sƒ±rbistan', flag: 'üá∑üá∏', code: 'RS' },
  { name: 'Karadaƒü', flag: 'üá≤üá™', code: 'ME' },
  { name: 'Kosova', flag: 'üáΩüá∞', code: 'XK' },
  { name: 'Arnavutluk', flag: 'üá¶üá±', code: 'AL' }
];

// Rastgele √ºlke se√ßme fonksiyonu
function getRandomCountries(count) {
  const shuffled = [...countries].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

// Oda olu≈üturma
function createRoom() {
  const roomId = uuidv4().substring(0, 8);
  const room = {
    id: roomId,
    players: [],
    gameState: 'waiting',
    currentRound: 0,
    maxRounds: 10,
    questions: [],
    scores: {},
    startTime: null
  };
  rooms.set(roomId, room);
  return roomId;
}

// Ana sayfa
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Oda olu≈üturma endpoint'i
app.post('/api/create-room', (req, res) => {
  const roomId = createRoom();
  res.json({ roomId });
});

// Oda bilgisi endpoint'i
app.get('/api/room/:roomId', (req, res) => {
  const room = rooms.get(req.params.roomId);
  if (room) {
    res.json(room);
  } else {
    res.status(404).json({ error: 'Oda bulunamadƒ±' });
  }
});

// Socket.IO baƒülantƒ± y√∂netimi
io.on('connection', (socket) => {
  console.log('Yeni baƒülantƒ±:', socket.id);

  // Oyuncu odaya katƒ±lma
  socket.on('join-room', (data) => {
    const { roomId, playerName } = data;
    const room = rooms.get(roomId);
    
    if (!room) {
      socket.emit('error', { message: 'Oda bulunamadƒ±' });
      return;
    }

    if (room.players.length >= 2) {
      socket.emit('error', { message: 'Oda dolu' });
      return;
    }

    // Oyuncuyu odaya ekle
    const player = {
      id: socket.id,
      name: playerName,
      score: 0,
      currentAnswer: null,
      answerTime: null
    };

    room.players.push(player);
    room.scores[socket.id] = 0;
    
    players.set(socket.id, { roomId, playerName });
    socket.join(roomId);

    // Odaya bilgi g√∂nder
    io.to(roomId).emit('player-joined', {
      players: room.players,
      gameState: room.gameState
    });

    // ƒ∞ki oyuncu da varsa oyunu ba≈ülat
    if (room.players.length === 2) {
      startGame(roomId);
    }
  });

  // Cevap g√∂nderme
  socket.on('submit-answer', (data) => {
    const { answer } = data;
    const playerInfo = players.get(socket.id);
    
    if (!playerInfo) return;
    
    const room = rooms.get(playerInfo.roomId);
    if (!room || room.gameState !== 'playing') return;

    const player = room.players.find(p => p.id === socket.id);
    if (!player || player.currentAnswer !== null) return;

    player.currentAnswer = answer;
    player.answerTime = Date.now();

    // Her iki oyuncu da cevap verdi mi kontrol et
    const allAnswered = room.players.every(p => p.currentAnswer !== null);
    
    if (allAnswered) {
      setTimeout(() => {
        evaluateRound(playerInfo.roomId);
      }, 1000);
    }
  });

  // Baƒülantƒ± kesildiƒüinde
  socket.on('disconnect', () => {
    const playerInfo = players.get(socket.id);
    if (playerInfo) {
      const room = rooms.get(playerInfo.roomId);
      if (room) {
        room.players = room.players.filter(p => p.id !== socket.id);
        delete room.scores[socket.id];
        
        if (room.players.length === 0) {
          rooms.delete(playerInfo.roomId);
        } else {
          io.to(playerInfo.roomId).emit('player-left', {
            players: room.players,
            gameState: 'waiting'
          });
        }
      }
      players.delete(socket.id);
    }
  });
});

// Oyunu ba≈ülatma
function startGame(roomId) {
  const room = rooms.get(roomId);
  if (!room) return;

  room.gameState = 'playing';
  room.currentRound = 0;
  room.questions = getRandomCountries(10);
  room.startTime = Date.now();

  // Her oyuncunun skorunu sƒ±fƒ±rla
  room.players.forEach(player => {
    room.scores[player.id] = 0;
    player.score = 0;
  });

  io.to(roomId).emit('game-started', {
    players: room.players,
    totalRounds: room.maxRounds
  });

  nextRound(roomId);
}

// Sonraki tur
function nextRound(roomId) {
  const room = rooms.get(roomId);
  if (!room) return;

  room.currentRound++;
  
  if (room.currentRound > room.maxRounds) {
    endGame(roomId);
    return;
  }

  // Oyuncularƒ±n cevaplarƒ±nƒ± sƒ±fƒ±rla
  room.players.forEach(player => {
    player.currentAnswer = null;
    player.answerTime = null;
  });

  const currentQuestion = room.questions[room.currentRound - 1];
  const options = getRandomCountries(4);
  
  // Doƒüru cevabƒ± se√ßenekler arasƒ±na ekle
  if (!options.find(opt => opt.name === currentQuestion.name)) {
    options[0] = currentQuestion;
  }

  // Se√ßenekleri karƒ±≈ütƒ±r
  const shuffledOptions = options.sort(() => 0.5 - Math.random());

  io.to(roomId).emit('new-round', {
    round: room.currentRound,
    question: currentQuestion,
    options: shuffledOptions,
    players: room.players
  });
}

// Tur deƒüerlendirme
function evaluateRound(roomId) {
  const room = rooms.get(roomId);
  if (!room) return;

  const currentQuestion = room.questions[room.currentRound - 1];
  const results = [];

  room.players.forEach(player => {
    const isCorrect = player.currentAnswer === currentQuestion.name;
    const timeBonus = player.answerTime ? Math.max(0, 10 - Math.floor((player.answerTime - room.startTime) / 1000)) : 0;
    const points = isCorrect ? 10 + timeBonus : 0;
    
    room.scores[player.id] += points;
    player.score = room.scores[player.id];
    
    results.push({
      playerId: player.id,
      playerName: player.name,
      answer: player.currentAnswer,
      correct: isCorrect,
      points: points,
      totalScore: player.score,
      timeBonus: timeBonus
    });
  });

  io.to(roomId).emit('round-result', {
    correctAnswer: currentQuestion.name,
    results: results,
    players: room.players
  });

  // 3 saniye sonra sonraki tur
  setTimeout(() => {
    nextRound(roomId);
  }, 3000);
}

// Oyunu bitirme
function endGame(roomId) {
  const room = rooms.get(roomId);
  if (!room) return;

  room.gameState = 'finished';
  
  const finalResults = room.players.map(player => ({
    id: player.id,
    name: player.name,
    score: room.scores[player.id]
  })).sort((a, b) => b.score - a.score);

  io.to(roomId).emit('game-finished', {
    results: finalResults,
    winner: finalResults[0]
  });
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server ${PORT} portunda √ßalƒ±≈üƒ±yor`);
}); 